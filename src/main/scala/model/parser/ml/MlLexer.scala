package model.parser.ml

import model.parser.grammar.*
import model.parser.template.*
import model.parser.template.AbstractLexer.LexerParams
import model.parser.util.*


/**
 * GENERATED BY CUSTOM PARSER GENERATOR FROM MT COURSE (thanks [[https://codeforces.com/profile/andrewzta @andrewzta]])
 */

import java.text.ParseException
import java.io.InputStream

case class MlLexer(inputStream: InputStream, lexerParams: LexerParams)
    extends AbstractLexer[MlToken](inputStream, lexerParams) {
  override val lexerRules = List(
    LexerRule[MlToken](MlToken.LPAREN, false),
    LexerRule[MlToken](MlToken.RPAREN, false),
    LexerRule[MlToken](MlToken.OPEN_PAIR, false),
    LexerRule[MlToken](MlToken.CLOSE_PAIR, false),
    LexerRule[MlToken](MlToken.FUN, false),
    LexerRule[MlToken](MlToken.LET, false),
    LexerRule[MlToken](MlToken.REC, false),
    LexerRule[MlToken](MlToken.IN, false),
    LexerRule[MlToken](MlToken.IF, false),
    LexerRule[MlToken](MlToken.THEN, false),
    LexerRule[MlToken](MlToken.ELSE, false),
    LexerRule[MlToken](MlToken.COMMA, false),
    LexerRule[MlToken](MlToken.FST, false),
    LexerRule[MlToken](MlToken.SND, false),
    LexerRule[MlToken](MlToken.ARROW, false),
    LexerRule[MlToken](MlToken.ADD, false),
    LexerRule[MlToken](MlToken.SUB, false),
    LexerRule[MlToken](MlToken.MUL, false),
    LexerRule[MlToken](MlToken.DIV, false),
    LexerRule[MlToken](MlToken.EQ, false),
    LexerRule[MlToken](MlToken.LT, false),
    LexerRule[MlToken](MlToken.GT, false),
    LexerRule[MlToken](MlToken.EQ_CMP, false),
    LexerRule[MlToken](MlToken.BOOL, false),
    LexerRule[MlToken](MlToken.NUMBER, false),
    LexerRule[MlToken](MlToken.VAR, false),
    LexerRule[MlToken](MlToken.SPACES, true),
  )

  override def getTokenWithName(name: String): MlToken = {
    MlToken.withName(name)
  }
}
